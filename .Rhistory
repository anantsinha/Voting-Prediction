female_no_authority <- filter(s_r_female, no.authority.exists == "Yes") %>%
nrow()
headings <- c("Total", "Blocked", "Reported", "Often", "Too Much Info", "No Authority")
data_female <- c(total_female, female_blocked, female_reported, female_often, female_too_much_info, female_no_authority)
data_female_normalised <- hist_data_female / total_female
female_table <- data.frame(heading = headings, percents = (data_female/total_female)*100)
library(ggplot2)
s_r <- as_tibble(read.csv("~/eu/sexual_romantic/sexual_romantic.csv"))
s_r <- filter(s_r, Agreed == "Yes, I agree")
s_r <- filter(s_r, sexual.romantic.req == "Yes")
s_r_female <- filter(s_r, Biological.Sex == "Female")
s_r_male <- filter(s_r, Biological.Sex == "Male")
s_r <- as_tibble(read.csv("~/eu/sexual_romantic/sexual_romantic.csv"))
library(ggplot2)
library(dplyr)
s_r <- as_tibble(read.csv("~/eu/sexual_romantic/sexual_romantic.csv"))
s_r <- filter(s_r, Agreed == "Yes, I agree")
s_r <- filter(s_r, sexual.romantic.req == "Yes")
s_r_female <- filter(s_r, Biological.Sex == "Female")
s_r_male <- filter(s_r, Biological.Sex == "Male")
total_female <- nrow(s_r_female)
female_blocked <- filter(s_r_female, blocked == "Yes") %>%
nrow()
female_reported <- filter(s_r_female, reported == "Yes") %>%
nrow()
female_often <- filter(s_r_female, happens.often == "Yes") %>%
nrow()
female_too_much_info <- filter(s_r_female, too.much.info.on.victim == "Yes") %>%
nrow()
female_no_authority <- filter(s_r_female, no.authority.exists == "Yes") %>%
nrow()
headings <- c("Total", "Blocked", "Reported", "Often", "Too Much Info", "No Authority")
data_female <- c(total_female, female_blocked, female_reported, female_often, female_too_much_info, female_no_authority)
data_female_normalised <- hist_data_female / total_female
female_table <- data.frame(heading = headings, percents = (data_female/total_female)*100)
ggplot(data=female_table, aes(x=heading, y=percents, fill = heading)) + geom_bar(colour = "black", stat = "identity") + guides (fill = FALSE)
#MALE
total_male <- nrow(s_r_male)
male_blocked <- filter(s_r_male, blocked == "Yes") %>%
nrow()
male_reported <- filter(s_r_male, reported == "Yes") %>%
nrow()
male_often <- filter(s_r_male, happens.often == "Yes") %>%
nrow()
male_too_much_info <- filter(s_r_male, too.much.info.on.victim == "Yes") %>%
nrow()
male_no_authority <- filter(s_r_male, no.authority.exists == "Yes") %>%
nrow()
headings <- c("Total", "Blocked", "Reported", "Often", "Too Much Info", "No Authority")
data_male <- c(total_male, male_blocked, male_reported, male_often, male_too_much_info, male_no_authority)
data_male_normalised <- hist_data_male / total_male
male_table <- data.frame(heading = headings, percents = (data_male/total_male)*100)
ggplot(data=male_table, aes(x=heading, y=percents, fill = heading)) + geom_bar(colour = "black", stat = "identity") + guides (fill = FALSE)
library(ggplot2)
library(dplyr)
s_r <- as_tibble(read.csv("~/eu/sexual_romantic/sexual_romantic.csv"))
s_r <- filter(s_r, Agreed == "Yes, I agree")
s_r <- filter(s_r, sexual.romantic.req == "Yes")
s_r_female <- filter(s_r, Biological.Sex == "Female")
s_r_male <- filter(s_r, Biological.Sex == "Male")
#FEMALE
total_female <- nrow(s_r_female)
female_blocked <- filter(s_r_female, blocked == "Yes") %>%
nrow()
female_reported <- filter(s_r_female, reported == "Yes") %>%
nrow()
female_often <- filter(s_r_female, happens.often == "Yes") %>%
nrow()
female_too_much_info <- filter(s_r_female, too.much.info.on.victim == "Yes") %>%
nrow()
female_no_authority <- filter(s_r_female, no.authority.exists == "Yes") %>%
nrow()
headings <- c("Total", "Blocked", "Reported", "Often", "Too Much Info", "No Authority")
data_female <- c(total_female, female_blocked, female_reported, female_often, female_too_much_info, female_no_authority)
data_female_normalised <- hist_data_female / total_female
female_table <- data.frame(heading = headings, percents = (data_female/total_female)*100)
ggplot(data=female_table, aes(x=heading, y=percents, fill = heading)) + geom_bar(colour = "black", stat = "identity") + guides (fill = FALSE)
#MALE
total_male <- nrow(s_r_male)
male_blocked <- filter(s_r_male, blocked == "Yes") %>%
nrow()
male_reported <- filter(s_r_male, reported == "Yes") %>%
nrow()
male_often <- filter(s_r_male, happens.often == "Yes") %>%
nrow()
male_too_much_info <- filter(s_r_male, too.much.info.on.victim == "Yes") %>%
nrow()
male_no_authority <- filter(s_r_male, no.authority.exists == "Yes") %>%
nrow()
headings <- c("Total", "Blocked", "Reported", "Often", "Too Much Info", "No Authority")
data_male <- c(total_male, male_blocked, male_reported, male_often, male_too_much_info, male_no_authority)
data_male_normalised <- hist_data_male / total_male
male_table <- data.frame(heading = headings, percents = (data_male/total_male)*100)
ggplot(data=male_table, aes(x=heading, y=percents, fill = heading)) + geom_bar(colour = "black", stat = "identity") + guides (fill = FALSE)
swirl()
library("swirl")
swirl()
5 + 7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
?lm
?runif
runif(0,10)
runif(5,0,10)
library(ggplot2)
library(dplyr)
s_r <- as_tibble(read.csv("~/eu/sexual_romantic/sexual_romantic.csv"))
s_r <- filter(s_r, Agreed == "Yes, I agree")
s_r <- filter(s_r, sexual.romantic.req == "Yes")
s_r_female <- filter(s_r, Biological.Sex == "Female")
s_r_male <- filter(s_r, Biological.Sex == "Male")
#FEMALE
total_female <- nrow(s_r_female)
female_blocked <- filter(s_r_female, blocked == "Yes") %>%
nrow()
female_reported <- filter(s_r_female, reported == "Yes") %>%
nrow()
female_often <- filter(s_r_female, happens.often == "Yes") %>%
nrow()
female_too_much_info <- filter(s_r_female, too.much.info.on.victim == "Yes") %>%
nrow()
female_no_authority <- filter(s_r_female, no.authority.exists == "Yes") %>%
nrow()
headings <- c("Total", "Blocked", "Reported", "Often", "Too Much Info", "No Authority")
data_female <- c(total_female, female_blocked, female_reported, female_often, female_too_much_info, female_no_authority)
data_female_normalised <- hist_data_female / total_female
female_table <- data.frame(heading = headings, percents = (data_female/total_female)*100)
ggplot(data=female_table, aes(x=heading, y=percents, fill = heading)) + geom_bar(colour = "black", stat = "identity") + guides (fill = FALSE)
#MALE
total_male <- nrow(s_r_male)
male_blocked <- filter(s_r_male, blocked == "Yes") %>%
nrow()
male_reported <- filter(s_r_male, reported == "Yes") %>%
nrow()
male_often <- filter(s_r_male, happens.often == "Yes") %>%
nrow()
male_too_much_info <- filter(s_r_male, too.much.info.on.victim == "Yes") %>%
nrow()
male_no_authority <- filter(s_r_male, no.authority.exists == "Yes") %>%
nrow()
headings <- c("Total", "Blocked", "Reported", "Often", "Too Much Info", "No Authority")
data_male <- c(total_male, male_blocked, male_reported, male_often, male_too_much_info, male_no_authority)
data_male_normalised <- hist_data_male / total_male
male_table <- data.frame(heading = headings, percents = (data_male/total_male)*100)
ggplot(data=male_table, aes(x=heading, y=percents, fill = heading)) + geom_bar(colour = "black", stat = "identity") + guides (fill = FALSE)
total_female
s_r_female
head(s_r_female)
summary(s_r_female)
y <- c(FALSE,2)
Y
y
class(y)
matrix(1:6 ,nrow = 2, ncol = 3)
swirl()
library("swirl")
swirl()
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
list.dirs()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
remove("mytest.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path("testdir2/testdir3"))
dir.create(file.path("testdir2/testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
1:20
pi:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by = 0.5)
my_seq <-seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
play()
my_seq
nxt()
seq_along(my_seq)
rep(0, times =40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
c(44, NA, 5, NA)
skip()
skip()
skip()
z <- rep(NA, 1000)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library("swirl")
swirl()
my_vector <- 1:20
my_vectors
library("swirl")
swirl()
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (c(1,20), 4, 5)
my_matrix2 <- (c(1,20) 4 5)
my_matrix2 <- (c (1:20), 4, 5)
my_matrix2 <- (c (1:20) 4 5)
my_matrix2 <- (data = c(1:20), nrow = 4, ncol = 5)
skip()
identical(my_matrix, my_matrix2)
library("swirl")
swirl()
patients = c("Bill", "Gina", "Kelly", "Sean")
info()
skip()
cbind (patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class (my_data)
cnames <- c("patient", "age", "weight", "rating", "test")
skip()
colnames(my_data) <- cnames
my_data
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = speed, y = dist)
plot(x = "speed", y = "dist")
skip()
plot(x = dist, y = speed)
plot(x = cars$speed, y = cars$dist)
plot (x = cars$dist, y = cars$speed)
plot (x = cars$dist, y = cars$speed, x-label = "Speed")
?plot
plot (cars, xlab = "Speed")
plot (x = cars$speed, y = cars$dist, xlab = "Speed")
plot (x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot (x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot (x = cars$speed, y = cars$dist, slab = "Speed", ylab = "Stopping Distance")
plot (x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
?plot
plot (cars, main = "My Plot")
?plot
plot (cars, sub = "My Plot Subtitle")
plot (cars, col = 2)
plot(cars, xlim = c(10,15))
plot (cars, pch = 2)
load(mtcars)
load("mtcars")
mtcars
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula(mpg ~ cyl), data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
my_df <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim (mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df (mydf)
rm("mydf")
cran
library("swirl")
swirl()
?select
?dplyr
select(cran, ip_id, package, country)
5:20
select(cran, r_arch: country)
select(cran, country: r_arch)
cran
select(cran, -time)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package = "swril")
filter(cran, package == "swril")
filter(cran, pacakge == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparision
?Comparision
?Comparison
filter(cran, version <= "3.0.2", country = "IN")
filter(cran, version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 10500)
filter(cran, size > 10500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, select(size:ip_id))
cran
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, asc(country), desc(r_version), asc(ip_id))
?arrange
arrange(cran2, ascending(country))
arrange(cran2, desc(country))
arrange(cran2, country, desc(r_version))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(ip_id, package, size)
cran
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(size_gb = size_mb / 2^10)
mutate(size_mb = size / 2^20, size_gb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size <- size + 1000)
mutate(cran3, correct_size = size + 1000)
pwd
getwd()
x <- c(2, 4, 1.5, 2, 3)
y <- c(7, 3, 8, 8, 6)
mean(x)
sd(x)
?sd
z <- (x-mean(x))/sd(x)
z
zx <- x
zx <- z
zx
zy <- (y - mean(y))/sd(y)
zx
z
sd(x)
sd(y)
mean(y)
y-mean(y)
zy
(sum(zx) * sum(zy))/(5)
sum(zx)
sd(x)
x
(x-mean(x))/sd(x)
z
zx
clear
zxzy<-zx*zy
sum(zxzy)
sum(zxzy) / 4
x = 2
x
rm(x)
e <- c(23, 17, 54, 32, 76, 88, 31, 9, 47, 26)
var(e)
(23-mean(e))/sd(e)
(9-mean(e))/sd(e)
setwd("~/Developer/Analytics Edge/Week 4 - Trees")
claims <- read.csv("boston.csv")
setwd("~/Developer/Analytics Edge/Week 4 - Trees")
boston <- read.csv("boston.csv")
rm(claims)
str(boston)
plot(boston$LON, boston$LAT)
plot(boston$LON, boston$LAT, col = "blue", pch = 19)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col = "blue", pch == 19)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col = "blue", pch == 19)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col = "blue", pch == 19)
plot(boston$LON, boston$LAT, pch = 5)
plot(boston$LON, boston$LAT, pch = 19)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col = "blue")
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], pch = 19, col = "blue")
points(boston$LAT[boston$TRACT==3531], boston$LON[boston$TRACT==3531], pch = 19, col = "red")
points(boston$LAT[boston$TRACT==3531], boston$LON[boston$TRACT==3531], pch = 19, col = "red")
points(boston$LAT[boston$TRACT==3531], boston$LON[boston$TRACT==3531], pch = 19, col = "red")
points(boston$LAT[boston$TRACT==3531], boston$LON[boston$TRACT==3531], pch = 19, col = "green")
points(boston$LON[boston$TRACT==3531], boston$LAT[boston$TRACT==3531], pch = 19, col = "red")
points(boston$LON[boston$TRACT==3531], boston$LAT[boston$TRACT==3531], pch = 19, col = "red")
points(boston$LON[boston$NOX >= 0.55], boston$LAT[boston$NOX >= 0.55], pch = 19, col = "green")
plot(boston$LON, boston$LAT, pch = 19)
plot(boston$LON, boston$LAT)
summary(boston$MEDV)
points(boston$LON[boston$MEDV >= 21.2], boston$LAT[boston$MEDV >= 21.2], pch = 19, col = "red")
latlonlm <- lm(MEDV ~ LAT + LON, data = boston)
summary(latlonlm)
plot(boston$LON[boston$MEDV >= 21.2], boston$LAT[boston$MEDV >= 21.2], pch = 19, col = "red")
plot(boston$LON, boston$LAT)
points(boston$LON[boston$MEDV >= 21.2], boston$LAT[boston$MEDV >= 21.2], pch = 19, col = "red")
latlonlm$fitted.values
points(boston$LON[latlonlm$fitted.values >= 21.2], boston$LAT[latlonlm$fitted.values >= 21.2], pch = "$", col = "blue")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
prp(latlontree)
library(rpart)
library(rpart.plot)
latlontree <- rpart(MEDV ~ LAT + LON, data = boston)
prp(latlontree)
plot(boston$LON, boston$LAT)
summary(boston$MEDV)
points(boston$LON[boston$MEDV >= 21.2], boston$LAT[boston$MEDV >= 21.2], pch = 19, col = "red")
fittedValues <- predict(latlontree)
fittedValues <- predict(latlontree)
fitteValues
fittedValues
points(boston$LON[fittedValues >= 21.2], boston$LAT[fittedValues >= 21.2], pch = "$", col = "blue")
latlontree <- rpart(MEDV ~ LAT + LON, data = boston, minbucket = 50)
plot(latlontree)
text(latlontree)
plot(boston$LON, boston$LAT)
abline(v = -71.07)
abline(h = 42.15)
plot(boston$LON, boston$LAT)
abline(v = -71.07)
split <- sample.split(boston, 0.7)
library(caTools)
set.seed(123)
split <- sample.split(boston, 0.7)
library(caret)
library(e1071)
tr.control <- trainControl(method = "cv", number = 10)
cp.grid = expand.grid(.cp = seq(0.01,0.5,0.01))
cp.grid
cp.grid = expand.grid(.cp = 0:10 * 0.001)
tr <- train(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + AGE + DIS + RAD + TAX + PTRATIO)
tr <- train(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + AGE + DIS + RAD + TAX + PTRATIO, data = train, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
setwd("~/Developer/Analytics Edge/Week 4 - Trees/Voting")
voting <- read.csv("gerger.csv")
voting <- read.csv("gerber.csv")
str(voting)
summary(voting)
head(voting)
table(voting$voting)
table(voting$civicduty, voting$voting)
table(voting$civicduty, voting$voting)
table(subset(voting, voting$civicduty==1)$voting)
table(subset(voting, voting$civicduty==1))
table(subset(voting, civicduty==1))
table(subset(voting, civicduty==1)$voting)
print("Civic Duty")
table(subset(voting, civicduty==1)$voting)
print("Hawthorne")
table(subset(voting, hawthorne==1)$voting)
table(subset(voting, self==1)$voting)
table(subset(voting, self==1)$voting)[0]
table(subset(voting, self==1)$voting)
print("Civic Duty")
table(subset(voting, civicduty==1)$voting)
print("Hawthorne")
table(subset(voting, hawthorne==1)$voting)
print("Self")
table(subset(voting, self==1)$voting)
print("Neighbors")
table(subset(voting, neighbors==1)$voting)
gerber <- voting
tapply(gerber$voting, gerber$civicduty, mean)
logReg <- glm(voting ~ civicduty + hawthorne + self + neighbors, data = voting, family = "binomial")
?glm
summary(logReg)
logPred <- predict(logReg, type = "response")
logPred <- predict(logReg, type = "response")
table(voting$voting, logPred > 0.3)
# threshold 0.5
table(voting$voting, logPred > 0.5)
table(voting$voting, logPred > 0.3)
table(voting$voting, logPred > 0.5)
table(voting$voting)
0.684
library(ROCR)
rocrPred <- prediction(logPred, voting$voting)
as.numeric(performance(rocrPred, "auc") @y.values)
